一、列表
    1、列表介绍
        <1>列表的格式
        变量A的类型为列表
            namesList = ['xiaoWang','xiaoZhang','xiaoHua']
        比C语言的数组强大的地方在于列表中的元素可以是不同类型的
            testList = [1, 'a']
        <2>打印列表
        demo:
            namesList = ['xiaoWang','xiaoZhang','xiaoHua']
            print(namesList[0])
            print(namesList[1])
            print(namesList[2])
        结果：
            xiaoWang
            xiaoZhang
            xiaoHua
    2、列表的循环遍历
        1. 使用for循环
        为了更有效率的输出列表的每个数据，可以使用循环来完成
        demo:
            namesList = ['xiaoWang','xiaoZhang','xiaoHua']
            for name in namesList:
                print(name)
        结果:
            xiaoWang
            xiaoZhang
            xiaoHua
        2. 使用while循环
        为了更有效率的输出列表的每个数据，可以使用循环来完成
        demo:
            namesList = ['xiaoWang','xiaoZhang','xiaoHua']
            length = len(namesList)
            i = 0
            while i<length:
                print(namesList[i])
                i+=1
        结果:
            xiaoWang
            xiaoZhang
            xiaoHua
    3、列表的相关操作
        列表中存放的数据是可以进行修改的，比如"增"、"删"、"改"、"查"
        <1>添加元素("增"append, extend, insert)
            append
                通过append可以向列表添加元素
            extend
                通过extend可以将另一个集合中的元素逐一添加到列表中
                    >>> a = [1, 2]
                    >>> b = [3, 4]
                    >>> a.append(b)
                    >>> a
                    [1, 2, [3, 4]]
                    >>> a.extend(b)
                    >>> a
                    [1, 2, [3, 4], 3, 4]
            insert
                insert(index, object) 在指定位置index前插入元素object
                    >>> a = [0, 1, 2]
                    >>> a.insert(1, 3)
                    >>> a
                    [0, 3, 1, 2]
            <2>修改元素("改")
                修改元素的时候，要通过下标来确定要修改的是哪个元素，然后才能进行修改
            demo:
                #定义变量A，默认有3个元素
                A = ['xiaoWang','xiaoZhang','xiaoHua']
                A[1] = 'xiaoLu'
                for tempName in A:
                    print(tempName)
            结果:
                xiaoWang
                xiaoLu
                xiaoHua
            <3>查找元素("查"in, not in, index, count)
                所谓的查找，就是看看指定的元素是否存在
                in, not in
                    python中查找的常用方法为：
                        in（存在）,如果存在那么结果为true，否则为false
                        not in（不存在），如果不存在那么结果为true，否则false
                说明：
                    in的方法只要会用了，那么not in也是同样的用法，只不过not in判断的是不存在

                index, count
                    index和count与字符串中的用法相同
                        >>> a = ['a', 'b', 'c', 'a', 'b']
                        >>> a.index('a', 1, 3) # 注意是左闭右开区间
                        Traceback (most recent call last):
                          File "<stdin>", line 1, in <module>
                        ValueError: 'a' is not in list
                        >>> a.index('a', 1, 4)
                        3
                        >>> a.count('b')
                        2
                        >>> a.count('d')
                        0
            <4>删除元素("删"del, pop, remove)
                列表元素的常用删除方法有：
                    del：根据下标进行删除
                    pop：删除最后一个元素
                    remove：根据元素的值进行删除

            <5>排序(sort, reverse)
                sort方法是将list按特定顺序重新排列，默认为由小到大，参数reverse=True可改为倒序，由大到小。
                reverse方法是将list逆置。
    4、列表的嵌套
        1. 列表嵌套
        类似while循环的嵌套，列表也是支持嵌套的
        一个列表中的元素又是一个列表，那么这就是列表的嵌套
            schoolNames = [['北京大学','清华大学'],
                            ['南开大学','天津大学','天津师范大学'],
                            ['山东大学','中国海洋大学']]
        2. 应用
        一个学校，有3个办公室，现在有8位老师等待工位的分配，请编写程序，完成随机的分配
        #encoding=utf-8
        import random
        # 定义一个列表用来保存3个办公室
        offices = [[],[],[]]
        # 定义一个列表用来存储8位老师的名字
        names = ['A','B','C','D','E','F','G','H']
        i = 0
        for name in names:
            index = random.randint(0,2)
            offices[index].append(name)
        i = 1
        for tempNames in offices:
            print('办公室%d的人数为:%d'%(i,len(tempNames)))
            i+=1
            for name in tempNames:
                print("%s"%name,end='')

二、元组
    Python的元组与列表类似，不同之处在于元组的元素不能修改。元组使用小括号，列表使用方括号。
        >>> aTuple = ('et',77,99.9)
        >>> aTuple
        ('et',77,99.9)
    <1>访问元组
        aTuple[1]

    <2>修改元组
        aTuple[1]=88 # TypeError:'tuple' object dose not support item assignment
        说明： python中不允许修改元组的数据，包括不能删除其中的元素。

    <3>count, index
        index和count与字符串和列表中的用法相同
        >>> a = ('a', 'b', 'c', 'a', 'b')
        >>> a.index('a', 1, 3) # 注意是左闭右开区间
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        ValueError: tuple.index(x): x not in tuple
        >>> a.index('a', 1, 4)
        3
        >>> a.count('b')
        2
        >>> a.count('d')
        0
三、enumerate()
        enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。
            >>> chars = ['a', 'b', 'c', 'd']
            >>> for i, chr in enumerate(chars):
            ...     print i, chr
            ...
            0 a
            1 b
            2 c
            3 d
四、补充
    list是处理一组有序项目的数据结构，即你可以在一个列表中存储一个序列的项目。列表中的项目。列表中的项目应该包括在方括号中，这样python就知道你是在指明
一个列表。一旦你创建了一个列表，你就可以添加，删除，或者是搜索列表中的项目。由于你可以增加或删除项目，我们说列表是可变的数据类型，即这种类型是可以被改
变的，并且列表是可以嵌套的。
    元组和列表十分相似，不过元组是不可变的。即你不能修改元组。元组通过圆括号中用逗号分隔的项目定义。元组通常用在使语句或用户定义的函数能够安全的采用一
组值的时候，即被使用的元组的值不会改变。元组可以嵌套。