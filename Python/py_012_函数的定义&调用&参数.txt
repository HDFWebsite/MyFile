一、函数介绍
    <1>什么是函数
        如果在开发程序时，需要某块代码多次，但是为了提高编写的效率以及代码的重用，所以把具有独立功能的代码块组织为一个小模块，这就是函数
    函数定义和调用
    <2>定义函数
    定义函数的格式如下：
        def 函数名():
            代码
    <3>调用函数
        定义了函数之后，就相当于有了一个具有某些功能的代码，想要让这些代码能够执行，需要调用它
        调用函数很简单的，通过 函数名() 即可完成调用
    <4>注意:
    每次调用函数时，函数都会从头开始执行，当这个函数中的代码执行完毕后，意味着调用结束了
    当然了如果函数中执行到了return也会结束函数
二、函数的文档说明
    >>> def test(a,b):
    ...     "用来完成对2个数求和"
    ...     print("%d"%(a+b))
    >>> test(11,22)
    33
    如果执行，以下代码

    >>> help(test)
    能够看到test函数的相关说明
    Help on function test in module __main__:
    test(a, b)
        用来完成对2个数求和
    (END)

三、函数参数(一)
    <1> 定义带有参数的函数
        示例如下：
        def add2num(a, b):
            c = a+b
            print c
    <2> 调用带有参数的函数
        以调用上面的add2num(a, b)函数为例:
        def add2num(a, b):
            c = a+b
            print c
        add2num(11, 22) # 调用带有参数的函数时，需要在小括号中，传递数据

    <4> 调用函数时参数的顺序
        >>> def test(a,b):
        ...     print(a,b)
        ...
        >>> test(1,2)
        1 2
        >>> test(b=1,a=2)
        2 1
        >>> test(b=1,2)
          File "<stdin>", line 1
        SyntaxError: positional argument follows keyword argument
        >>>
    <4> 小总结
        定义时小括号中的参数，用来接收参数用的，称为 “形参”
        调用时小括号中的参数，用来传递给函数用的，称为 “实参”
四、函数参数(二)
    <1>. 缺省参数
        调用函数时，缺省参数的值如果没有传入，则取默认值。
    下例会打印默认的age，如果age没有被传入：
        def printinfo(name, age=35):
           # 打印任何传入的字符串
           print("name: %s" % name)
           print("age %d" % age)
        # 调用printinfo函数
        printinfo(name="miki")  # 在函数执行过程中 age去默认值35
        printinfo(age=9 ,name="miki")
        以上实例输出结果：
                        name: miki
                        age: 35
                        name: miki
                        age: 9
        总结：
            在形参中默认有值的参数，称之为缺省参数
            注意：带有默认值的参数一定要位于参数列表的最后面
                >>> def printinfo(name, age=35, sex):
                ...     print name
                ...
                  File "<stdin>", line 1
                SyntaxError: non-default argument follows default argument
    <2>. 不定长参数
        有时可能需要一个函数能处理比当初声明时更多的参数, 这些参数叫做不定长参数，声明时不会命名。
    基本语法如下：
        def functionname([formal_args,] *args, **kwargs):
           """函数_文档字符串"""
           function_suite
           return [expression]
    注意：
        加了星号（*）的变量args会存放所有未命名的变量参数，args为元组
        而加**的变量kwargs会存放命名参数，即形如key=value的参数， kwargs为字典.
        >>> def fun(a, b, *args, **kwargs):
        ...     """可变参数演示示例"""
        ...     print("a =%d" % a)
        ...     print("b =%d" % b)
        ...     print("args:")
        ...     print(args)
        ...     print("kwargs: ")
        ...     for key, value in kwargs.items():
        ...         print("key=%s" % value)
        >>> fun(1, 2, 3, 4, 5, m=6, n=7, p=8)  # 注意传递的参数对应
        a = 1
        b = 2
        args:
        (3, 4, 5)
        kwargs:
        p = 8
        m = 6
        n = 7
        >>> c = (3, 4, 5)
        >>> d = {"m":6, "n":7, "p":8}
        >>> fun(1, 2, *c, **d)    # 注意元组与字典的传参方式
        a = 1
        b = 2
        args:
        (3, 4, 5)
        kwargs:
        p = 8
        m = 6
        n = 7
        >>> fun(1, 2, c, d) # 注意不加星号与上面的区别
        a = 1
        b = 2
        args:
        ((3, 4, 5), {'p': 8, 'm': 6, 'n': 7})
        kwargs:

    <3>. 缺省参数在*args后面
        def sum_nums_3(a, *args, b=22, c=33, **kwargs):
            print(a)
            print(b)
            print(c)
            print(args)
            print(kwargs)
        sum_nums_3(100, 200, 300, 400, 500, 600, 700, b=1, c=2, mm=800, nn=900)
    说明：
        如果很多个值都是不定长参数，那么这种情况下，可以将缺省参数放到 *args的后面， 但如果有**kwargs的话，**kwargs必须是最后的
