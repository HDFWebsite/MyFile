一、函数返回值(一)
    <1>“返回值”介绍
        现实生活中的场景:
            我给儿子10块钱，让他给我买包烟。这个例子中，10块钱是我给儿子的，就相当于调用函数时传递到参数，让儿子买烟这个事情最终的目标是，让他把烟给你
        带回后给你对么，，，此时烟就是返回值

        开发中的场景：
            定义了一个函数，完成了获取室内温度，想一想是不是应该把这个结果给调用者，只有调用者拥有了这个返回值，才能够根据当前的温度做适当的调整

         综上所述：
            所谓“返回值”，就是程序中函数完成一件事情后，最后给调用者的结果
    <2>带有返回值的函数
        想要在函数中把结果返回给调用者，需要在函数中使用return
            如下示例:
                def add2num(a, b):
                    c = a+b
                    return c
                或者
                def add2num(a, b):
                    return a+b
    <3>保存函数的返回值
        保存函数的返回值示例如下:
            #定义函数
            def add2num(a, b):
                return a+b
            #调用函数，顺便保存函数的返回值
            result = add2num(100,98)
            #因为result已经保存了add2num的返回值，所以接下来就可以使用了
            print(result)
            结果:
                198
二、函数返回值(二)
    在python中我们怎样返回多个值？
    <1> 多个return?
        def create_nums():
            print("---1---")
            return 1  # 函数中下面的代码不会被执行，因为return除了能够将数据返回之外，还有一个隐藏的功能：结束函数
            print("---2---")
            return 2
            print("---3---")
    总结1：
        一个函数中可以有多个return语句，但是只要有一个return语句被执行到，那么这个函数就会结束了，因此后面的return没有什么用处
        如果程序设计为如下，是可以的因为不同的场景下执行不同的return
        def create_nums(num):
            print("---1---")
            if num == 100:
                print("---2---")
                return num+1  # 函数中下面的代码不会被执行，因为return除了能够将数据返回之外，还有一个隐藏的功能：结束函数
            else:
                print("---3---")
                return num+2
            print("---4---")
        result1 = create_nums(100)
        print(result1)  # 打印101
        result2 = create_nums(200)
        print(result2)  # 打印202

    <2> 一个函数返回多个数据的方式
        def divid(a, b):
            shang = a//b
            yushu = a%b
            return shang, yushu  #默认是元组

        result = divid(5, 2)
        print(result)  # 输出(2, 1)
    总结2：
        return后面可以是元组，列表、字典等，只要是能够存储多个数据的类型，就可以一次性返回多个数据
        def function():
            # return [1, 2, 3]
            # return (1, 2, 3)
            return {"num1": 1, "num2": 2, "num3": 3}
    如果return后面有多个数据，那么默认是元组
        In [1]: a = 1, 2
        In [2]: a
        Out[2]: (1, 2)
        In [3]:
        In [3]: b = (1, 2)
        In [4]: b
        Out[4]: (1, 2)
        In [5]:
三、函数类型
    4种函数的类型
        函数根据有没有参数，有没有返回值，可以相互组合，一共有4种
        无参数，无返回值
        无参数，有返回值
        有参数，无返回值
        有参数，有返回值
    <1>无参数，无返回值的函数
        此类函数，不能接收参数，也没有返回值，一般情况下，打印提示灯类似的功能，使用这类的函数

    <2>无参数，有返回值的函数
        此类函数，不能接收参数，但是可以返回某个数据，一般情况下，像采集数据，用此类函数

    <3>有参数，无返回值的函数
        此类函数，能接收参数，但不可以返回数据，一般情况下，对某些变量设置数据而不需结果时，用此类函数

    <4>有参数，有返回值的函数
        此类函数，不仅能接收参数，还可以返回某个数据，一般情况下，像数据处理并需要结果的应用，用此类函数
        # 计算1~num的累积和
        def calculateNum(num):
            result = 0
            i = 1
            while i<=num:
                result = result + i
                i+=1
            return result
        result = calculateNum(100)
        print('1~100的累积和为:%d'%result)
        结果:
            1~100的累积和为: 5050
    <5>小总结
        函数根据有没有参数，有没有返回值可以相互组合
        定义函数时，是根据实际的功能需求来设计的，所以不同开发人员编写的函数类型各不相同
四、函数的嵌套调用
    1、函数的嵌套调用
        def testB():
            print('---- testB start----')
            print('这里是testB函数执行的代码...(省略)...')
            print('---- testB end----')

        def testA():
            print('---- testA start----')
            testB()
            print('---- testA end----')
        testA()

        结果：
            ---- testA start----
            ---- testB start----
            这里是testB函数执行的代码...(省略)...
            ---- testB end----
            ---- testA end----
    小总结：
        一个函数里面又调用了另外一个函数，这就是所谓的函数嵌套调用