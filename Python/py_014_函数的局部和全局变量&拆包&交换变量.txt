一、局部变量
    <1>什么是局部变量
        局部变量，就是在函数内部定义的变量
        数调用时，局部变量被创建，当函数调用完成后这个变量就不能够使用了其作用范围是这个函数内部，即只能在这个函数中使用，在函数的外部是不能使用的
        因为其作用范围只是在自己的函数内部，所以不同的函数可以定义相同名字的局部变量（打个比方，把你、我是当做成函数，把局部变量理解为每个人手里的手机，
    你可有个iPhone8，我当然也可以有个iPhone8了， 互不相关）
        局部变量的作用，为了临时保存数据需要在函数中定义变量来进行存储
        当函数调用时，局部变量被创建，当函数调用完成后这个变量就不能够使用了
二、全局变量
    <1>什么是全局变量
        如果一个变量，既能在一个函数中使用，也能在其他的函数中使用，这样的变量就是全局变量
        打个比方：有2个兄弟 各自都有手机，各自有自己的小秘密在手机里，不让另外一方使用（可以理解为局部变量）；但是家里的电话是2个兄弟都可以随便使用的（可以理解为全局变量）
        demo如下:
    # 定义全局变量
        a = 100
        def test1():
            print(a)  # 虽然没有定义变量a但是依然可以获取其数据
        def test2():
            print(a)  # 虽然没有定义变量a但是依然可以获取其数据
        # 调用函数
        test1()
        test2()
    总结1:
        在函数外边定义的变量叫做全局变量
        全局变量能够在所有的函数中进行访问
    <2>全局变量和局部变量名字相同问题
        当函数内出现局部变量和全局变量相同名字时，函数内部中的 变量名 = 数据 此时理解为定义了一个局部变量，而不是修改全局变量的值
    <3>修改全局变量
        如果在函数中出现global 全局变量的名字 那么这个函数中即使出现和全局变量名相同的变量名 = 数据 也理解为对全局变量进行修改，而不是定义局部变量
        如果在一个函数中需要对多个全局变量进行修改，那么可以使用
         # 可以使用一次global对多个全局变量进行声明
         global a, b
         # 还可以用多次global声明都是可以的
         # global a
         # global b
三、多函数程序的基本使用流程
    一般在实际开发过程中，一个程序往往由多个函数（后面知识中会讲解类）组成，并且多个函数共享某些数据，这种场景是经常出现的，因此下面来总结下，多个函
    数中共享数据的几种方式

    1. 使用全局变量
        g_num = 0
        def test1():
            global g_num
            # 将处理结果存储到全局变量g_num中.....
            g_num = 100
        def test2():
            # 通过获取全局变量g_num的值, 从而获取test1函数处理之后的结果
            print(g_num)
        # 1. 先调用test1得到数据并且存到全局变量中
        test1()
        # 2. 再调用test2，处理test1函数执行之后的这个值
        test2()
    2. 使用函数的返回值、参数
        def test1():
             # 通过return将一个数据结果返回
             return 50
        def test2(num):
            # 通过形参的方式保存传递过来的数据，就可以处理了
            print(num)
        # 1. 先调用test1得到数据并且存到变量result中
        result = test1()
        # 2. 调用test2时，将result的值传递到test2中，从而让这个函数对其进行处理
        test2(result)
    3. 函数嵌套调用
        def test1():
            # 通过return将一个数据结果返回
            return 20
        def test2():
            # 1. 先调用test1并且把结果返回来
            result = test1()
            # 2. 对result进行处理
            print(result)
        # 调用test2时，完成所有的处理
        test2()
4、拆包、交换变量的值
    <1> 对返回的数据直接拆包
        def get_my_info():
            high = 178
            weight = 100
            age = 18
            return high, weight, age
        # result = get_my_info()
        # print(result)
        my_high, my_weight, my_age = get_my_info()
        print(my_high)
        print(my_weight)
        print(my_age)
    总结：
        拆包时要注意，需要拆的数据的个数要与变量的个数相同，否则程序会异常
        除了对元组拆包之外，还可以对列表、字典等拆包
            In [17]: a, b = (11, 22)
            In [18]: a
            Out[18]: 11
            In [19]: b
            Out[19]: 22

            In [20]: a, b = [11, 22]
            In [21]: a
            Out[21]: 11
            In [22]: b
            Out[22]: 22

            In [23]: a, b = {"m":11, "n":22}  # 取出来的是key，而不是键值对
            In [24]: a
            Out[24]: 'm'
            In [25]: b
            Out[25]: 'n'
    <2> 交换2个变量的值
        # 第1种方式
            a = 4
            b = 5
            c = 0

            c = a
            a = b
            b = c

            print(a)
            print(b)

        # 第2种方式
            a = 4
            b = 5
            a = a+b  # a=9, b=5
            b = a-b  # a=9, b=4
            a = a-b  # a=5, b=4
            print(a)
            print(b)

        # 第3种方式
            a, b = 4, 5
            a, b = b, a

            print(a)
            print(b)